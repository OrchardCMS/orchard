name: Compile

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - dev
      - 1.10.x

jobs:
  compile-dotnet:
    name: Compile .NET solution
    defaults:
      run:
        shell: pwsh
    runs-on: windows-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4.1.1

      - name: Restore NuGet packages
        run: nuget restore src/Orchard.sln

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Compile
        run: msbuild Orchard.proj /m /v:minimal /t:Compile /p:TreatWarningsAsErrors=true -WarnAsError /p:MvcBuildViews=true

      - name: Test
        run: msbuild Orchard.proj /m /v:minimal /t:Test

      - name: Run Orchard setup
        run: |
          $commandFile = "src/Orchard.Web/bin/setup-commands.txt"
          New-Item -Path $commandFile -ItemType File -Force
          Set-Content -Path $commandFile -Value 'setup /SiteName:Orchard /AdminUsername:admin /AdminPassword:Password1! /DatabaseProvider:SqlCe /Recipe:Default'
          & "src/Orchard.Web/bin/Orchard.exe" @$commandFile

      - name: Run code generation
        run: |
          $commandFile = "src/Orchard.Web/bin/codegen-commands.txt"
          New-Item -Path $commandFile -ItemType File -Force
          Set-Content -Path $commandFile -Value @'
            feature enable Orchard.CodeGeneration
            codegen module Orchard.CodeGeneration.TestModule
            codegen theme Orchard.CodeGeneration.TestTheme /CreateProject:true
            codegen moduletests Orchard.CodeGeneration.TestModule
          '@
          & "src/Orchard.Web/bin/Orchard.exe" @$commandFile

      - name: Compile with generated projects
        run: msbuild Orchard.proj /m /v:minimal /t:Compile /p:TreatWarningsAsErrors=true -WarnAsError /NoWarn:CS2008

  compile-node:
    name: Compile client-side assets
    defaults:
      run:
        shell: pwsh
    runs-on: windows-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4.1.1

      - name: Setup NodeJS
        uses: actions/setup-node@v4.0.2
        with:
          node-version: '7'

      - name: Setup NPM packages
        working-directory: ./src
        run: |
          npm install --loglevel warn

          # Install gulp globally to be able to run the rebuild task, using the same version as in the project.
          $gulpVersion = (Get-Content Package.json -Raw | ConvertFrom-Json).devDependencies.gulp
          Start-Process npm -NoNewWindow -Wait -ArgumentList "install gulp@$gulpVersion -g --loglevel warn"

      - name: Rebuild client-side assets
        working-directory: ./src
        run: |
          gulp rebuild

          git add . # To make line ending changes "disappear".
          $gitStatus = (git status --porcelain)
          if ($gitStatus)
          {
            throw ("Client-side assets are not up-to-date. Please run 'gulp rebuild' and commit the changes.`n" +
              [System.String]::Join([System.Environment]::NewLine, $gitStatus))
          }
